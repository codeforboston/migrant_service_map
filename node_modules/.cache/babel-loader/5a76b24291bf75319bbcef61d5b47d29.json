{"ast":null,"code":"/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n'use strict';\n\nvar attempt = require('./attempt');\n/**\n * Create a promise whose work is started only when a handler is registered.\n *\n * The work function will be invoked at most once. Thrown values will result\n * in promise rejection.\n *\n * @param {Function} work function whose ouput is used to resolve the\n *   returned promise.\n * @returns {Promise} a lazy promise\n */\n\n\nfunction lazyPromise(work) {\n  var started, resolver, promise, then;\n  started = false;\n  promise = new Promise(function (resolve, reject) {\n    resolver = {\n      resolve: resolve,\n      reject: reject\n    };\n  });\n  then = promise.then;\n\n  promise.then = function () {\n    if (!started) {\n      started = true;\n      attempt(work).then(resolver.resolve, resolver.reject);\n    }\n\n    return then.apply(promise, arguments);\n  };\n\n  return promise;\n}\n\nmodule.exports = lazyPromise;","map":null,"metadata":{},"sourceType":"script"}