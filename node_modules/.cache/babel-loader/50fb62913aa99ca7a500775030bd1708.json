{"ast":null,"code":"'use strict';\n\nvar invariant = require('../vendor/invariant');\n\nvar constants = require('./constants');\n\nvar client = require('./client');\n\nvar getUser = require('./get_user');\n/**\n * Services all have the same constructor pattern: you initialize them\n * with an access token and options, and they validate those arguments\n * in a predictable way. This is a constructor-generator that makes\n * it possible to require each service's API individually.\n *\n * @private\n * @param {string} name the name of the Mapbox API this class will access:\n * this is set to the name of the function so it will show up in tracebacks\n * @returns {Function} constructor function\n */\n\n\nfunction makeService(name) {\n  function service(accessToken, options) {\n    this.name = name;\n    invariant(typeof accessToken === 'string', 'accessToken required to instantiate Mapbox client');\n    var endpoint = constants.DEFAULT_ENDPOINT;\n\n    if (options !== undefined) {\n      invariant(typeof options === 'object', 'options must be an object');\n\n      if (options.endpoint) {\n        invariant(typeof options.endpoint === 'string', 'endpoint must be a string');\n        endpoint = options.endpoint;\n      }\n\n      if (options.account) {\n        invariant(typeof options.account === 'string', 'account must be a string');\n        this.owner = options.account;\n      }\n    }\n\n    this.client = client({\n      endpoint: endpoint,\n      accessToken: accessToken\n    });\n    this.accessToken = accessToken;\n    this.endpoint = endpoint;\n    this.owner = this.owner || getUser(accessToken);\n    invariant(!!this.owner, 'could not determine account from provided accessToken');\n  }\n\n  return service;\n}\n\nmodule.exports = makeService;","map":null,"metadata":{},"sourceType":"script"}