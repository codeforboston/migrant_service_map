{"ast":null,"code":"/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n'use strict';\n\nvar pathPrefix, template, find, lazyPromise, responsePromise;\npathPrefix = require('../../../interceptor/pathPrefix');\ntemplate = require('../../../interceptor/template');\nfind = require('../../../util/find');\nlazyPromise = require('../../../util/lazyPromise');\nresponsePromise = require('../../../util/responsePromise');\n\nfunction defineProperty(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value: value,\n    configurable: true,\n    enumerable: false,\n    writeable: true\n  });\n}\n/**\n * Hypertext Application Language serializer\n *\n * Implemented to https://tools.ietf.org/html/draft-kelly-json-hal-06\n *\n * As the spec is still a draft, this implementation will be updated as the\n * spec evolves\n *\n * Objects are read as HAL indexing links and embedded objects on to the\n * resource. Objects are written as plain JSON.\n *\n * Embedded relationships are indexed onto the resource by the relationship\n * as a promise for the related resource.\n *\n * Links are indexed onto the resource as a lazy promise that will GET the\n * resource when a handler is first registered on the promise.\n *\n * A `requestFor` method is added to the entity to make a request for the\n * relationship.\n *\n * A `clientFor` method is added to the entity to get a full Client for a\n * relationship.\n *\n * The `_links` and `_embedded` properties on the resource are made\n * non-enumerable.\n */\n\n\nmodule.exports = {\n  read: function read(str, opts) {\n    var client, console;\n    opts = opts || {};\n    client = opts.client;\n    console = opts.console || console;\n\n    function deprecationWarning(relationship, deprecation) {\n      if (deprecation && console && console.warn || console.log) {\n        (console.warn || console.log).call(console, 'Relationship \\'' + relationship + '\\' is deprecated, see ' + deprecation);\n      }\n    }\n\n    return opts.registry.lookup(opts.mime.suffix).then(function (converter) {\n      return converter.read(str, opts);\n    }).then(function (root) {\n      find.findProperties(root, '_embedded', function (embedded, resource, name) {\n        Object.keys(embedded).forEach(function (relationship) {\n          if (relationship in resource) {\n            return;\n          }\n\n          var related = responsePromise({\n            entity: embedded[relationship]\n          });\n          defineProperty(resource, relationship, related);\n        });\n        defineProperty(resource, name, embedded);\n      });\n      find.findProperties(root, '_links', function (links, resource, name) {\n        Object.keys(links).forEach(function (relationship) {\n          var link = links[relationship];\n\n          if (relationship in resource) {\n            return;\n          }\n\n          defineProperty(resource, relationship, responsePromise.make(lazyPromise(function () {\n            if (link.deprecation) {\n              deprecationWarning(relationship, link.deprecation);\n            }\n\n            if (link.templated === true) {\n              return template(client)({\n                path: link.href\n              });\n            }\n\n            return client({\n              path: link.href\n            });\n          })));\n        });\n        defineProperty(resource, name, links);\n        defineProperty(resource, 'clientFor', function (relationship, clientOverride) {\n          var link = links[relationship];\n\n          if (!link) {\n            throw new Error('Unknown relationship: ' + relationship);\n          }\n\n          if (link.deprecation) {\n            deprecationWarning(relationship, link.deprecation);\n          }\n\n          if (link.templated === true) {\n            return template(clientOverride || client, {\n              template: link.href\n            });\n          }\n\n          return pathPrefix(clientOverride || client, {\n            prefix: link.href\n          });\n        });\n        defineProperty(resource, 'requestFor', function (relationship, request, clientOverride) {\n          var client = this.clientFor(relationship, clientOverride);\n          return client(request);\n        });\n      });\n      return root;\n    });\n  },\n  write: function write(obj, opts) {\n    return opts.registry.lookup(opts.mime.suffix).then(function (converter) {\n      return converter.write(obj, opts);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}