{"ast":null,"code":"/*\n * Copyright 2014-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n'use strict';\n/**\n * Plain JS Object containing properties that represent an HTTP request.\n *\n * Depending on the capabilities of the underlying client, a request\n * may be cancelable. If a request may be canceled, the client will add\n * a canceled flag and cancel function to the request object. Canceling\n * the request will put the response into an error state.\n *\n * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD\n * @field {string|UrlBuilder} [path=''] path template with optional path variables\n * @field {Object} [params] parameters for the path template and query string\n * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers\n * @field [entity] the HTTP entity, common for POST or PUT requests\n * @field {boolean} [canceled] true if the request has been canceled, set by the client\n * @field {Function} [cancel] cancels the request if invoked, provided by the client\n * @field {Client} [originator] the client that first handled this request, provided by the interceptor\n *\n * @class Request\n */\n\n/**\n * Plain JS Object containing properties that represent an HTTP response\n *\n * @field {Object} [request] the request object as received by the root client\n * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser\n * @field {number} [status.code] status code of the response (i.e. 200, 404)\n * @field {string} [status.text] status phrase of the response\n * @field {Object] [headers] response headers hash of normalized name, value pairs\n * @field [entity] the response body\n *\n * @class Response\n */\n\n/**\n * HTTP client particularly suited for RESTful operations.\n *\n * @field {function} wrap wraps this client with a new interceptor returning the wrapped client\n *\n * @param {Request} the HTTP request\n * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response\n *\n * @class Client\n */\n\n/**\n * Extended when.js Promises/A+ promise with HTTP specific helpers\n *q\n * @method entity promise for the HTTP entity\n * @method status promise for the HTTP status code\n * @method headers promise for the HTTP response headers\n * @method header promise for a specific HTTP response header\n *\n * @class ResponsePromise\n * @extends Promise\n */\n\nvar client, target, platformDefault;\nclient = require('../client');\n\nif (typeof Promise !== 'function' && console && console.log) {\n  console.log('An ES6 Promise implementation is required to use rest.js. See https://github.com/cujojs/when/blob/master/docs/es6-promise-shim.md for using when.js as a Promise polyfill.');\n}\n/**\n * Make a request with the default client\n * @param {Request} the HTTP request\n * @returns {Promise<Response>} a promise the resolves to the HTTP response\n */\n\n\nfunction defaultClient() {\n  return target.apply(void 0, arguments);\n}\n/**\n * Change the default client\n * @param {Client} client the new default client\n */\n\n\ndefaultClient.setDefaultClient = function setDefaultClient(client) {\n  target = client;\n};\n/**\n * Obtain a direct reference to the current default client\n * @returns {Client} the default client\n */\n\n\ndefaultClient.getDefaultClient = function getDefaultClient() {\n  return target;\n};\n/**\n * Reset the default client to the platform default\n */\n\n\ndefaultClient.resetDefaultClient = function resetDefaultClient() {\n  target = platformDefault;\n};\n/**\n * @private\n */\n\n\ndefaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {\n  if (platformDefault) {\n    throw new Error('Unable to redefine platformDefaultClient');\n  }\n\n  target = platformDefault = client;\n};\n\nmodule.exports = client(defaultClient);","map":null,"metadata":{},"sourceType":"script"}